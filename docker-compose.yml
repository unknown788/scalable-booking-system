# version: '3.8'

services:
  # --- DATABASE SERVICES ---
  db:
    image: postgres:15-alpine
    container_name: booking_db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=bookingdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  test_db:
    image: postgres:15-alpine
    container_name: booking_test_db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=bookingdb_test
    ports:
      - "5433:5432"

  # --- CACHING & QUEUING ---
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s

  # --- EMAIL TESTING ---
  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - "8025:8025"
      - "1025:1025"

  # --- APPLICATION SERVICES ---
  backend:
    build: .  # Build from the Dockerfile in the current directory
    container_name: backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=.
    depends_on:

      db:
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  notification_worker:
    build: . # Also builds from the same Dockerfile
    container_name: notification_worker
    command: celery -A app.worker worker --loglevel=info
    env_file:
      - .env
    environment:
      - PYTHONPATH=.
    depends_on:
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started

volumes:
  postgres_data:
    name: booking_db_data